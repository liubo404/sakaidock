Digital Earth and Life Space
</group/Digital-Earth-and-Life-Space?hl=en&lnk=> 	今夜我想你 [色情图片 -
Erotic Pictures] </group/EroticPics?hl=en&lnk=> *(207)*
Playful Young Ladies </group/Playful-Young-Ladies?hl=en&lnk=> *(2113)*
夫妻交友俱樂部 </group/sydneycouples?hl=en&lnk=> *(388)*
Sakai Kernel 	广东圣地 </group/gd_gzsd?hl=en&lnk=> *(309)*
Spiritual Body Works Of Indianapolis Indiana
</group/Spiritual-Body-Works-Of-Indianapolis-Indiana?hl=en&lnk=> *(388)* 	
成人美图 </group/meinvpic?hl=en&lnk=> *(790)*
中国性吧 </group/chinaxbar?hl=en&lnk=> *(5)* 	成人資訊網
</group/t3322stc?hl=en&lnk=> *(8047)*
乐不思蜀邮件列表 </group/ebusishu?hl=en&lnk=> *(42)* 	欢乐谷
</group/happycanyon?hl=en&lnk=> *(2880)*
*Recently visited*  [clear]
</groups/clearrecent?hl=en&Action.ClearRecent&_done=%2Fgroup%2Fsakai-kernel%2Fweb%2Fk2-caching-implementation%3Fhl%3Den>
adobe.svg </group/adobe.svg?hl=en&lnk=> 	mozilla.support.firefox
</group/mozilla.support.firefox?hl=en&lnk=>
Android Beginners </group/android-beginners?hl=en&lnk=> 	redsaga-notify
</group/redsaga-notify?hl=en&lnk=> *(7)*
Android Developers </group/android-developers?hl=en&lnk=> 	Spark View
Engine Dev </group/spark-dev?hl=en&lnk=>
blogger交流 </group/blogger2008?hl=en&lnk=> 	【乐不思蜀】会员俱乐部
</group/lebusishubbs?hl=en&lnk=>
comp.infosystems.gis </group/comp.infosystems.gis?hl=en&lnk=> 	夫妻交友
俱乐部【已验证】 </group/huan-qi?hl=en&lnk=>
Machine Learning News </group/ML-news?hl=en&lnk=> 	成人世界
</group/adultworld?hl=en&lnk=> *(12)*

Groups Alerts <http://www.google.com/alerts?t=8&hl=en> Groups Alerts
<http://www.google.com/alerts?t=8&hl=en>
*Create a group... </groups/create?hl=en&lnk=l>*
Google Groups Home </?hl=en>

	*bochuxt@gmail.com* | My Groups </?hl=en> | Favorites
</groups/favorites?hl=en> | Profile </groups/profile?hl=en&myprofile> |
Help </support?hl=en> | My Account
<https://www.google.com/accounts/ManageAccount?hl=en> | Sign out
</groups/signout?hl=en&q=1&_done=%2Fgroup%2Fsakai-kernel%2Fweb%2Fk2-caching-implementation%3Fhl%3Den>


	
Sakai Kernel </group/sakai-kernel?hl=en>
	
		

Home </group/sakai-kernel?hl=en>

Discussions </group/sakai-kernel/topics?hl=en>

Pages </group/sakai-kernel/web?hl=en>

+ add new page <#>

Files </group/sakai-kernel/files?hl=en>
About this group </group/sakai-kernel/about?hl=en>
Edit my membership </group/sakai-kernel/subscribe?hl=en>
		

*Group info*
*Members:* 61
*Activity:* Low activity
*Language:* English
*Group categories:* /Not categorized/
*More group info » </group/sakai-kernel/about?hl=en>*

		

*Recent pages and files*
AAA Index </group/sakai-kernel/web/aaa-index?hl=en> 	6:03am
Authorization </group/sakai-kernel/web/authorization?hl=en> 	6:02am
Relational Indexes & JCR
</group/sakai-kernel/web/relational-indexes-jcr?hl=en> 	6:01am
Authorization(2)_img_1.jpg
<http://sakai-kernel.googlegroups.com/web/Authorization(2)_img_1.jpg?hl=en&gda=cduzxVAAAADrEswdrVWjD6FpUIyszRRbcVcetgcH-JiZeIauZZ0PwA2ab9AKaL_BUF4MZAySMa60srPT98LWj-81pTwX9GlubcVT3VtYGKLco-_l-8AzjQ>
	5:59am
relationindex2.png
<http://sakai-kernel.googlegroups.com/web/relationindex2.png?hl=en&gda=tkIMpEQAAADrEswdrVWjD6FpUIyszRRbKWi4pNN2Y2OWFVTf7PxlVNikRep6wwpepv6EeIJJc6RV6u9SiETdg0Q2ffAyHU-dzc4BZkLnSFWX59nr5BxGqA>
	1:57am
miniHowTo - Write a Webapp with K2
</group/sakai-kernel/web/howto---write-a-webapp-with-k2?hl=en> 	1:22am
miniHOWTO Write a component in K2
</group/sakai-kernel/web/minihowto-write-a-component-in-k2?hl=en> 	Feb 3
K2 Classloader </group/sakai-kernel/web/k2-classloader?hl=en> 	Jan 23
K2-Classloaders.png
<http://sakai-kernel.googlegroups.com/web/K2-Classloaders.png?hl=en&gda=Y_cZ0kUAAADrEswdrVWjD6FpUIyszRRbLVA0EJ7gDeE6a4QB32bkCrI6UCvoiRMPT21xhY4w_itzlqnWZQD3y6jZqCMfSFQ6Gu1iLHeqhw4ZZRj3RjJ_-A>
	Jan 23
Technical Approach to "Everything is Content"
</group/sakai-kernel/web/technical-approach-to-everything-is-content?hl=en>
	Jan 23

		

K2 Caching Implementation   	  Edit
</group/sakai-kernel/edit/k2-caching-implementation?hl=en>

		

This page outlines some aspects of the caching in K2.


      Caching.

In Sakai 2x we had a memory service and a thread local manager. The
memory service implemented a caching mechanims, before 2.4 there was no
LRU mechanism. After 2.4 we added in JVM LRU caches in the form of
ehCache, although we still used sakai events for invalidation of the
cache entries.


In addition to the shared caches many services used request scoped
thread locals to perform service level caching to eliminate repetative
calls, recalculation or simply to communicate between various parts of
the code base.


All of the above are basically different forms of cache. In K2 we have
added a CacheManager that provided caches based on name and scope. There
are 5 groups of cache scope (Defined in CacheScope). Request, Thread,
Instance, Cluster Invalidated and Cluster Replicated.


        Request

Request scoped caches have a lifetime of request. All elements are
invalidated at the end of the request and none are invalidated during
the request cycle. The cache itself is bound to the request, and in this
sense its is an identical replacement to the ThreadLocalManager in Sakai
2x. Each named cache has an isolated key namespace.


        Thread

Thread scope cache is bound to the thread and lives as long as the
thread lives. It does not invalidate and shop must be used carefully to
ensure that memory leaks dont happen. Each thread scoped cache is
created and retrieved by name resulting in a isolated cache key
namespace for each named cache.


        Instance

Instance scoped caches are shared amongs all threads in the JVM, and
live for the life of the JVM. These caches are ehcaches with no cluster
wide invalidation or replication. They can be configured with an
invalidation policy and paging policy, although this depends on the
underlying caching mechanims. Caches are retrieved by name and where a
configuration for a name is specified that will be used. Where no
configuration is matched for a name a default configuration will be
used. Again the key namespace of each cache is isolated to the named cache.


        Custer Invalidated

Cluster Invalidated caches are local to the instance, but when entries
are invalidated on a node, invalidations happen on all nodes enabling
eviction of elements that have been updated. The characteristics are the
same as Instance scoped caches.


        Cluster Replicated

Cluster Replicated caches are configured to provide cluster wide
replication of the elements, meaning that if an element is added to a
cache the element is replicated over the whole cache. It is vitally
important that elements in this type of cache are saved back to the
cache when changes are made to ensure that the repication happens. A
simple update to members of an object in a cache will not cause
replication to happen.  The payload of each element for these caches
must be serializable, but other than that these are the same as Cluster
Invalidated.


The structure and use of the cache manager in the SessionManagerService
is shown below.

</group/sakai-kernel/web/CacheManager20081022.png?hl=en> 

 

In the diagram above the top figure shows the lifetime of ech cache
type. In the bottom interaction diagram the operation of the
SessionManagerService illustrates the use of the CacheManagerService.
The SessionManagerService allows a session to be attached to the request
scope, and that session to then be retrieved. So the Session Cache is a
cluster wide replecated cache making the kernel session available on all
nodes. When a request comes in the session object (S) is identified
using something in the request and bound into a Session Request Cache,
that can then be retrieved by any component via the
SessionManagerService. At the end of the Request cycle the Session
Request Cache is invalidated leaving the session behind in the Cluster
Replicated Session Cache.

If the Session implements the ThreadBound interface it can be notified
of the unbind operation and commit itself back to the Cluster Repicated
Session Cache if changes have been made.

There will be opertunitied for making this session transactional on the
request cycle using this technique.


This code is implemented in the kernel component inside the agnostic
POC, although the component could probably be used in any container
style we choose to use.



	Version: 

Page editing not supported in your web browser. Download a new copy of
Firefox <http://getfirefox.com> or Internet Explorer
<http://www.microsoft.com/windows/ie/downloads/> to edit pages.
*1 message about this page *
*Oct 22 2008* by Ian Boston
I have been doing some work on the Cache and Thread Local
implementation in the Agnostic POC, details are in this page.

Click on
http://groups.google.com/group/sakai-kernel/web/k2-caching-implementation
- or copy & paste it into your browser's address bar if that doesn't
work.

Report this page
</groups/abuse?hl=en&group=sakai-kernel&type=page&url=http%3A%2F%2Fgroups.google.com%2Fgroup%2Fsakai-kernel%2Fweb%2Fk2-caching-implementation%3Fhl%3Den&_done=%2Fgroup%2Fsakai-kernel%2Fweb%2Fk2-caching-implementation%3Fhl%3Den%26&>

Reply to this discussion <#>
Hide message box <#>

	

*Create a group </groups/create?hl=en&lnk=gcf>* - Google Groups
</?hl=en> - Google Home <http://www.google.com/webhp?hl=en> - Terms of
Service
<http://groups.google.com/intl/en/googlegroups/terms_of_service3.html> -
Privacy Policy
<http://groups.google.com/intl/en/googlegroups/privacy3.html>
©2009 Google

