Digital Earth and Life Space
</group/Digital-Earth-and-Life-Space?hl=en&lnk=> 	今夜我想你 [色情图片 -
Erotic Pictures] </group/EroticPics?hl=en&lnk=> *(207)*
Playful Young Ladies </group/Playful-Young-Ladies?hl=en&lnk=> *(2113)*
夫妻交友俱樂部 </group/sydneycouples?hl=en&lnk=> *(388)*
Sakai Kernel 	广东圣地 </group/gd_gzsd?hl=en&lnk=> *(309)*
Spiritual Body Works Of Indianapolis Indiana
</group/Spiritual-Body-Works-Of-Indianapolis-Indiana?hl=en&lnk=> *(388)* 	
成人美图 </group/meinvpic?hl=en&lnk=> *(790)*
中国性吧 </group/chinaxbar?hl=en&lnk=> *(5)* 	成人資訊網
</group/t3322stc?hl=en&lnk=> *(8047)*
乐不思蜀邮件列表 </group/ebusishu?hl=en&lnk=> *(42)* 	欢乐谷
</group/happycanyon?hl=en&lnk=> *(2880)*
*Recently visited*  [clear]
</groups/clearrecent?hl=en&Action.ClearRecent&_done=%2Fgroup%2Fsakai-kernel%2Fweb%2Fwhy-what-how-k2%3Fhl%3Den>
adobe.svg </group/adobe.svg?hl=en&lnk=> 	mozilla.support.firefox
</group/mozilla.support.firefox?hl=en&lnk=>
Android Beginners </group/android-beginners?hl=en&lnk=> 	redsaga-notify
</group/redsaga-notify?hl=en&lnk=> *(7)*
Android Developers </group/android-developers?hl=en&lnk=> 	Spark View
Engine Dev </group/spark-dev?hl=en&lnk=>
blogger交流 </group/blogger2008?hl=en&lnk=> 	【乐不思蜀】会员俱乐部
</group/lebusishubbs?hl=en&lnk=>
comp.infosystems.gis </group/comp.infosystems.gis?hl=en&lnk=> 	夫妻交友
俱乐部【已验证】 </group/huan-qi?hl=en&lnk=>
Machine Learning News </group/ML-news?hl=en&lnk=> 	成人世界
</group/adultworld?hl=en&lnk=> *(12)*

Groups Alerts <http://www.google.com/alerts?t=8&hl=en> Groups Alerts
<http://www.google.com/alerts?t=8&hl=en>
*Create a group... </groups/create?hl=en&lnk=l>*
Google Groups Home </?hl=en>

	*bochuxt@gmail.com* | My Groups </?hl=en> | Favorites
</groups/favorites?hl=en> | Profile </groups/profile?hl=en&myprofile> |
Help </support?hl=en> | My Account
<https://www.google.com/accounts/ManageAccount?hl=en> | Sign out
</groups/signout?hl=en&q=1&_done=%2Fgroup%2Fsakai-kernel%2Fweb%2Fwhy-what-how-k2%3Fhl%3Den>


	
Sakai Kernel </group/sakai-kernel?hl=en>
	
		

Home </group/sakai-kernel?hl=en>

Discussions </group/sakai-kernel/topics?hl=en>

Pages </group/sakai-kernel/web?hl=en>

+ add new page <#>

Files </group/sakai-kernel/files?hl=en>
About this group </group/sakai-kernel/about?hl=en>
Edit my membership </group/sakai-kernel/subscribe?hl=en>
		

*Group info*
*Members:* 61
*Activity:* Low activity
*Language:* English
*Group categories:* /Not categorized/
*More group info » </group/sakai-kernel/about?hl=en>*

		

*Recent pages and files*
AAA Index </group/sakai-kernel/web/aaa-index?hl=en> 	6:03am
Authorization </group/sakai-kernel/web/authorization?hl=en> 	6:02am
Relational Indexes & JCR
</group/sakai-kernel/web/relational-indexes-jcr?hl=en> 	6:01am
Authorization(2)_img_1.jpg
<http://sakai-kernel.googlegroups.com/web/Authorization(2)_img_1.jpg?hl=en&gda=fBMHHFAAAADrEswdrVWjD6FpUIyszRRbPUQIebdY-Vpo6KE4Ey7y9g2ab9AKaL_BUF4MZAySMa60srPT98LWj-81pTwX9GlubcVT3VtYGKLco-_l-8AzjQ>
	5:59am
relationindex2.png
<http://sakai-kernel.googlegroups.com/web/relationindex2.png?hl=en&gda=DyNUakQAAADrEswdrVWjD6FpUIyszRRbJHLk2TOD74R1gAeELXI54NikRep6wwpepv6EeIJJc6RV6u9SiETdg0Q2ffAyHU-dzc4BZkLnSFWX59nr5BxGqA>
	1:57am
miniHowTo - Write a Webapp with K2
</group/sakai-kernel/web/howto---write-a-webapp-with-k2?hl=en> 	1:22am
miniHOWTO Write a component in K2
</group/sakai-kernel/web/minihowto-write-a-component-in-k2?hl=en> 	Feb 3
K2 Classloader </group/sakai-kernel/web/k2-classloader?hl=en> 	Jan 23
K2-Classloaders.png
<http://sakai-kernel.googlegroups.com/web/K2-Classloaders.png?hl=en&gda=OTYBtEUAAADrEswdrVWjD6FpUIyszRRbn6wGcUM4FelKxQbggEH_A7I6UCvoiRMPT21xhY4w_itzlqnWZQD3y6jZqCMfSFQ6Gu1iLHeqhw4ZZRj3RjJ_-A>
	Jan 23
Technical Approach to "Everything is Content"
</group/sakai-kernel/web/technical-approach-to-everything-is-content?hl=en>
	Jan 23

		

Why, What, How K2   	  Edit
</group/sakai-kernel/edit/why-what-how-k2?hl=en>

		

The K2 Project

 

Executive Summary

 

When we first wrote Sakai it was under the pressures of delivering a
production environment within a particular timescale. Much of the code
at the time was re-used from earlier homegrown projects. The world has
since moved on:  the quality of 3rd party libraries has improved while
the areas of functionality that those libraries cover has broadened, to
such an extent that much of the existing functionality we have in Sakai
might simply be replaced with better solutions from elsewhere.  Thus far
Sakai has worked toward incremental improvements, and while progress has
been made it has proven to be slow, expensive, and is rapidly leading to
diminishing returns. Armed with the insight gained from the legacy
experience, we are in a good position to establish backing technologies
that both improve the product and reduce community burdens.


The Sakai "kernel" is a core set of services, and a legacy kernel has
already been circumscribed in the 2.x codebase as 'K1.'  K2 aims to be a
next-generation kernel for the Sakai product, addressing the following
regions of concern:

*
*

   1.

      *Flexibility for the User Experience:*  In Sakai 2.x the ways in
      which content is organized (e.g. the site boundary) and shared
      (e.g. site membership) throw up unnecessary barriers. At the same
      time functionality is generally constrained to tool silos which
      frame contexts and workflows too narrowly.  K2 needs to provide a
      more flexible underlying infrastructure which can be more readily
      adapted to a richer set of possible user experiences.

   2.

      *Scalability and Resilience:* Production teams are often compelled
      to deploy significant amounts of infrastructure in order to scale
      Sakai. Clustering is (at best) partially realized, performance is
      relatively poor, the database is used inefficiently, and practical
      solutions too often amount to just throwing more hardware at
      code-level problems. The core of Sakai needs to be built in a way
      that supports full clustering while also providing good
      scalability and resilience.

   3.

      *Developer Ease of Use:*  Recent community efforts in client-side
      development have underscored just how torturous and inefficient
      the legacy Sakai development model is.  A depth of technical skill
      and attention to an inordinate quantity of detail is required to
      achieve even the simplest results, and the consequences of this
      difficulty ripple outward:  less gets done, fewer people are able
      to do it, and usability experts are effectively held at arm's
      length.  The technical difficulty of development has proved to
      have a qualitative impact on the product.

   4.

      *Code Quality and Maintainability:*  The maturity of other open
      source projects now allows us to consider swapping out whole
      regions of Sakai services with 3rd party code.  By judicious
      incorporation of such services our overall quality can be
      improved, our APIs can be made more standard, and our maintenance
      burdens and risks lightened.  To date Sakai has also had very
      little test code.  This oversight increases burdens on QA cycles
      by not exposing problems quickly enough, ultimately forcing us
      into a post-release reactive posture with regard to critical
      bugs.  While quality 3rd party code brings good test coverage with
      it, we should also extend full coverage to Sakai services.

/
/

/[finer-grained notes and descriptions to be developed below]/


    Flexibility for the User Experience

[unfinished notes below]

 

[Some trial writing by Michael. It occurs to me that this should mostly
move to the 3.0 document] 


_Breaking the "Site" stranglehold_

_ _

In legacy Sakai the site context is a deep and rigid assumption for
nearly all functionality, and it stands in the way of activities that
might extend across sites or operate independently of them. The notion
of the group in Sakai stands as a particularly strong example of
unnecessary and unhelpful site dependence, but it is only one such
example. In general K1 code base treats Users and Sites as first-class
citizens and it is possible to argue that Sites are really primary above
everything else. In any case, in K2 a wider variety of "citizens"
(concepts) will be managed as independent of other concept.
Relationships between those concepts will be defined, of course, but the
notion of one such concept providing the context for other "first class"
concepts should be reduced or eliminated. 

 

At least Users, Groups, Permissions, Content and Tags should be treated
as first class citizens. (Notice that Site is left out. While it should
be a user facing concept, I think it is probably "just" a collection of
the first class citizens viewed through a particular lens.).
Authorization to perform certain actions or view certain content would
be therefore decoupled from sites. Authorization to access content would
be a relationship between a User and a Content object. While that user
may get authorization to view a particular content object on the basis
of being associated with a particular group


_Enabling the exploration of Social networking_

- A new set of social networking capabilities can make use of the
OpenSocial API for widget development and portability (via the inclusion
Apache Shindig)


_Making users into authors/creators & __Breaking the Tool silo_


The ability for users to manipulate Sakai and make it look and feel the
way they want is exceedingly difficult in K1. The current work in the
2.x code base to make relevant objects (content, tools) accessible via
simple, human-readable URLs (following a RESTful web services approach)
is one important component of enabling this. As soon as you can get a
hold of something via a URL you make it much easier to let users control
the appearance and functionality of their environment. You don't like
the the fact that the discussion forum appears in a particular place? 
Grab the URL for it and stick it somewhere else.


_ _"Everything is content"

- entitization of functional areas such that they can be embedded in
interactive form within content pages: such orchestration calls for an
architectural approach (esp. RESTful web services) which can allow for
more free-form editing and arrangement of materials and activities

 

_
_

_ _



Note:  Sakai 3 user experiences that would be supported:

    * All content 'owned/controlled' by an individual should be readily
      available in one place. 'Owned/controlled content' includes
      references and other 3rd party material that I collected and
      marked up for some purpose. 'Collection' can happen 'in-line'
      during page authoring (see below).  'Owned/controlled' content
      also includes content for which an individual has full
      administration rights (which may have been granted by another
      individual as owner). Content should be searchable/browsable
      according to 'where used' and a 'current site' filter would match
      Sakai 2 functionality.
    * versioning of content (e.g. wiki-style)
    * support social networking apps.
    * make alternatives to 'site-centric' organisations of information
      first-class citizens (alongside site-centric) and allow group
      membership independent of 'site' membership – e.g. this group of
      people can administer these sites, or this group of people are
      members of this college (even though the college does not have a
      'site').
    * Seek to streamline and simplify permissions, while making 'open'
      collaboration easier (collaborate with others outside the
      university, publish to the world) 


    Scalability and Resilience

[unfinished notes below]

 

- Mobile sessions within a cluster that will enable operations teams to
take app servers offline for maintenance without having to worry about
the impact on users.
- Smaller memory footprint for the application, and smaller memory
footprint per user that will enable each app server to host more
concurrent users.  (Smaller by how much?  Will be revealed through testing)
- Minimize session usage, and put mechanisms in place to encourage
developers to use best practices (monitoring, reporting, name and shame)
(What are the appropriate metrics here?)

- Move to JPA as a standard for persistence

- Use EclipseLink (or something else) instead of Hibernate as a JPA
provider:  our issues with Hibernate have been many and varied

- Enable scalable storage where more than one back end storage server
might be used to support an installation, potentially re-using cloud
concepts either at the url level or through distributed hashing of
content (longer-term aim).


    Developer Ease of Use

[unfinished notes below]


- The Agnostic POC for building and deploying webapps and components in
a simpler (but better-structured) way

- Make it easier to work with the kernel at a UI-developer-level, aiming
to attract UI developers with skill levels comparable to basic PHP
developers.
- Make the Kernel fully REST-based and encourage the use of web2
development methodologies, in the form of HTML/JS/JSON/AJAX, but
continue to support traditional server side approaches where developers
want to work that way.
- Conform to Web standards: URLs point to resources, HTTP methods have
the meanings defined in the standards, etc.

- Automated build and integration testing


    Code Quality and Maintainability

[unfinished notes below]

 

- High levels of automated test coverage
- Visible monitoring of test coverage.  (what does this mean?)
- Strong application and enforcement of code style (active use of
Checkstyle)
- Mechanisms to encourage and maintain quality (active use of JDepend,
Findbugs)
- Code review for wide scale patches (this seems more of a process point
than a K2 deliverable)
- Automated build

- 3rd-party code of particular promise:

    - JCR and Apache Jackrabbit for content storage

    - Apache Sling services for RESTful access to content (but probably
not *all* of Sling)

    - Apache Shindig for social networking capabilities

    - Eclipselink for JPA implementation (persistence management to
roughly replace Hibernate)

 



	Version: 

Page editing not supported in your web browser. Download a new copy of
Firefox <http://getfirefox.com> or Internet Explorer
<http://www.microsoft.com/windows/ie/downloads/> to edit pages.
*Latest 3 messages about this page (12 total) - *view full discussion
</group/sakai-kernel/browse_thread/thread/b463fdc837d8735?hl=en>
*Aug 25 2008* by Carl Hall
Yay, I'm now getting messages from the group!
As cool an idea as component hot-swapping may seem, the idea doesn't seem
very plausible with so many components being tied together. If they were
more independent, I could see it, but we have too many cross dependencies
for me to consider this truly viable. I agree that a fully clustered

*Aug 25 2008* by Ian Boston
OSGi component reload?
I remain dubious of this in real production. Everyone I have talked
to who has really done it in production says you have to throttle all
request, and tear down to the dependency in question before bringing
it back up again. This is effectively a restart in the case of the

*Aug 22 2008* by Laura James
Clay, James, that's the kind of thing I was thinking of. Having a
problem statement is useful too, but for each problem, we should be
thinking about the response as well. So, a problem+response might look
like:

"In Sakai 2.x the way in which content is organized (e.g. the site
boundary, to take one example) throws up barriers to individual

9 more messages »
</group/sakai-kernel/browse_thread/thread/b463fdc837d8735?hl=en>

Report this page
</groups/abuse?hl=en&group=sakai-kernel&type=page&url=http%3A%2F%2Fgroups.google.com%2Fgroup%2Fsakai-kernel%2Fweb%2Fwhy-what-how-k2%3Fhl%3Den&_done=%2Fgroup%2Fsakai-kernel%2Fweb%2Fwhy-what-how-k2%3Fhl%3Den%26&>

Reply to this discussion <#>
Hide message box <#>

	

*Create a group </groups/create?hl=en&lnk=gcf>* - Google Groups
</?hl=en> - Google Home <http://www.google.com/webhp?hl=en> - Terms of
Service
<http://groups.google.com/intl/en/googlegroups/terms_of_service3.html> -
Privacy Policy
<http://groups.google.com/intl/en/googlegroups/privacy3.html>
©2009 Google

