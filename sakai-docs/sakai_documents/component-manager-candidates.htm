Digital Earth and Life Space
</group/Digital-Earth-and-Life-Space?hl=en&lnk=> 	今夜我想你 [色情图片 -
Erotic Pictures] </group/EroticPics?hl=en&lnk=> *(207)*
Playful Young Ladies </group/Playful-Young-Ladies?hl=en&lnk=> *(2113)*
夫妻交友俱樂部 </group/sydneycouples?hl=en&lnk=> *(388)*
Sakai Kernel 	广东圣地 </group/gd_gzsd?hl=en&lnk=> *(309)*
Spiritual Body Works Of Indianapolis Indiana
</group/Spiritual-Body-Works-Of-Indianapolis-Indiana?hl=en&lnk=> *(388)* 	
成人美图 </group/meinvpic?hl=en&lnk=> *(790)*
中国性吧 </group/chinaxbar?hl=en&lnk=> *(5)* 	成人資訊網
</group/t3322stc?hl=en&lnk=> *(8047)*
乐不思蜀邮件列表 </group/ebusishu?hl=en&lnk=> *(42)* 	欢乐谷
</group/happycanyon?hl=en&lnk=> *(2880)*
*Recently visited*  [clear]
</groups/clearrecent?hl=en&Action.ClearRecent&_done=%2Fgroup%2Fsakai-kernel%2Fweb%2Fcomponent-manager-candidates%3Fhl%3Den>
adobe.svg </group/adobe.svg?hl=en&lnk=> 	mozilla.support.firefox
</group/mozilla.support.firefox?hl=en&lnk=>
Android Beginners </group/android-beginners?hl=en&lnk=> 	redsaga-notify
</group/redsaga-notify?hl=en&lnk=> *(7)*
Android Developers </group/android-developers?hl=en&lnk=> 	Spark View
Engine Dev </group/spark-dev?hl=en&lnk=>
blogger交流 </group/blogger2008?hl=en&lnk=> 	【乐不思蜀】会员俱乐部
</group/lebusishubbs?hl=en&lnk=>
comp.infosystems.gis </group/comp.infosystems.gis?hl=en&lnk=> 	夫妻交友
俱乐部【已验证】 </group/huan-qi?hl=en&lnk=>
Machine Learning News </group/ML-news?hl=en&lnk=> 	成人世界
</group/adultworld?hl=en&lnk=> *(12)*

Groups Alerts <http://www.google.com/alerts?t=8&hl=en> Groups Alerts
<http://www.google.com/alerts?t=8&hl=en>
*Create a group... </groups/create?hl=en&lnk=l>*
Google Groups Home </?hl=en>

	*bochuxt@gmail.com* | My Groups </?hl=en> | Favorites
</groups/favorites?hl=en> | Profile </groups/profile?hl=en&myprofile> |
Help </support?hl=en> | My Account
<https://www.google.com/accounts/ManageAccount?hl=en> | Sign out
</groups/signout?hl=en&q=1&_done=%2Fgroup%2Fsakai-kernel%2Fweb%2Fcomponent-manager-candidates%3Fhl%3Den>


	
Sakai Kernel </group/sakai-kernel?hl=en>
	
		

Home </group/sakai-kernel?hl=en>

Discussions </group/sakai-kernel/topics?hl=en>

Pages </group/sakai-kernel/web?hl=en>

+ add new page <#>

Files </group/sakai-kernel/files?hl=en>
About this group </group/sakai-kernel/about?hl=en>
Edit my membership </group/sakai-kernel/subscribe?hl=en>
		

*Group info*
*Members:* 61
*Activity:* Low activity
*Language:* English
*Group categories:* /Not categorized/
*More group info » </group/sakai-kernel/about?hl=en>*

		

*Recent pages and files*
AAA Index </group/sakai-kernel/web/aaa-index?hl=en> 	6:03am
Authorization </group/sakai-kernel/web/authorization?hl=en> 	6:02am
Relational Indexes & JCR
</group/sakai-kernel/web/relational-indexes-jcr?hl=en> 	6:01am
Authorization(2)_img_1.jpg
<http://sakai-kernel.googlegroups.com/web/Authorization(2)_img_1.jpg?hl=en&gda=0C4Na1AAAADrEswdrVWjD6FpUIyszRRb8jD7nfV1Xiei8NOoztAjgw2ab9AKaL_BUF4MZAySMa60srPT98LWj-81pTwX9GlubcVT3VtYGKLco-_l-8AzjQ>
	5:59am
relationindex2.png
<http://sakai-kernel.googlegroups.com/web/relationindex2.png?hl=en&gda=TYYOKEQAAADrEswdrVWjD6FpUIyszRRbcrPrHQJRfKrlVdNLQa_iOtikRep6wwpepv6EeIJJc6RV6u9SiETdg0Q2ffAyHU-dzc4BZkLnSFWX59nr5BxGqA>
	1:57am
miniHowTo - Write a Webapp with K2
</group/sakai-kernel/web/howto---write-a-webapp-with-k2?hl=en> 	1:22am
miniHOWTO Write a component in K2
</group/sakai-kernel/web/minihowto-write-a-component-in-k2?hl=en> 	Feb 3
K2 Classloader </group/sakai-kernel/web/k2-classloader?hl=en> 	Jan 23
K2-Classloaders.png
<http://sakai-kernel.googlegroups.com/web/K2-Classloaders.png?hl=en&gda=CbbYiEUAAADrEswdrVWjD6FpUIyszRRbHlg4Ov52zWixqYFIc20aDbI6UCvoiRMPT21xhY4w_itzlqnWZQD3y6jZqCMfSFQ6Gu1iLHeqhw4ZZRj3RjJ_-A>
	Jan 23
Technical Approach to "Everything is Content"
</group/sakai-kernel/web/technical-approach-to-everything-is-content?hl=en>
	Jan 23

		

Component Manager Candidates   	  Edit
</group/sakai-kernel/edit/component-manager-candidates?hl=en>

		

This page documents potential Component Managers, trying to communicate
the layout and issues.

 

There is no magic in a component manager or its classloader structure.
Classloaders are used to isolate classes and functionality, but for
classes to communicate with one anntoher they need to have acess to the
same classes or interfaces. In Sakai 2.x this was achieved with shared
interfaces. In an OSGi world the OSGi classloaders export packages based
on the package name, and the version number of the package. This enables
consumers (C in the diagrams below) to communicate with target classes
(C in the diagrams below) via interfaces (B, below). The more
sophisticated the classloader structure, the more flexable it becomes,
but the harder it becomes to configure and manage.


</group/sakai-kernel/web/OSGiLayoutOptions20080930-4.png?hl=en> 

This is the traditional Sakai 2.x component manager. The Component
manager starts on first use by a webapp. It finds the shared classloader
and loads the component manager into that classloader. The component
manager then loads each component into its own classloader.  Interaces
B, and supporting infrastructure Hibernate/Spring are in the shared
classloader. Where packages are duplicated between classloaders there is
a duplication of classes and consumption of perm space. Each classloader
also creates an overhead in perm space.



</group/sakai-kernel/web/OSGiLayoutOptions20080930-3.png?hl=en>

 In this model we have moved the initialisation of the component
contianer outside the webapp container and made it listen to the tomcat
lifecycle. In this configuration the container is a top level app server
contianer in its own right. The approach is applicable to all webapp
containers ( Jetty, Tomcat5, Tomcat6, Glassfish etc) but will require a
small amount of custom code to bootstrap the Lifecycle Container.

In this example we have placed Felix, and OSGi implementation inside the
container and configured OSGi bundles for Spring 2.0.6, Hibernate and
the Sakai Kernel. OSGi exports packages from a bunbdle that can be
shared by other bundles, and avoids the need to place shared packages in
a shared classloader. It achieves this with custom classloaders that
read the bundle and have knowledge of the version of each package. These
classloaders also look at a bundle registry to find other shared
packages. The other non-OSGi classloaders are not able to automatically
get access to shared classes in this way.



</group/sakai-kernel/web/OSGiLayoutOptions20080930-1.png?hl=en> 

The disadvantage of the deligate method is that the webapp contained
inside OSGi has to be self contained. This means that classes that are
generated by the webapp dont know about the delegated context. For
instance JSP (including JSF) which compiles its classes from disks on
file would start binding to classes in the webapp classloaders and not
inside the OSGi bundle.

One way of adressign this is to return to a simpler model. Take the
interfaces (B) put them in shared and allow the consumers (C) to bind
via the shared interfaces (B) to the service implementations (A). 

The disadvantage of this approach is that anything that is visable to
the webapp and OSGi must be in shared, which complicates the
configuration of the OSGi container and requires dicipline (which
already exists) not to bind to implementations.


</group/sakai-kernel/web/OSGiLayoutOptions20080930-2.png?hl=en> 

To address this, many implementators of OSGi suggest that OSGi should be
the top level container so that all classloaders are managed by OSGi in
bundles removing the need to have explicitly places all interfaces
classes in shared. In this configuration Spring DM manages Spring
Application Contexts and wires them together bindig all application
contexts to the same implementation of spring. In addition a Spring DM
web extender recognizes bundles contianing webapps by some additional
metatdata in the webapp and loads those webapps into an empty tomcat
context. The webapp extender bundle provides a resource resolver to the
classpath of the webapp making the internals of the war availalbe to the
webapp context. This means that you cannot edit the webapp while loaded,
but you have to rebuild the war and redeploy to make changes.
Fortunately since nothing will bind to a webapp, unless it exports
references, OSGi will reload the webapp without unloading any of the
other bundles.

In order for this to work a modified version of Tomcat has to be created
that has the correct bindings to be able to load OSGi bundles webapps.
This modification, configuration and rebundling will have to be repeated
for each webapp container and each version, slthough the Felix Maven
plugins make some of this process considerabley easier.

The other drawback of this approach is that Spring DM binds to a precise
version of Spring, and that version of Spring must be used by all
bundles that want to use Spring DM. Spring DM bridges to OSGi and
exports beans to OSGi depending on the bundle configuration.

</group/sakai-kernel/web/OSGiLayoutOptions20080930-7.png?hl=en> 

An alternative approach to eliminate the issues over shared classloaders
is to replace the webapp classloader inside the webapp context. This is
a surgical options that is supported by all the major webapp containers.
It would mean replacing the webapp classloader with a classloader that
was outside the OSGi container by bound to the OSGi registry and acted
in the same way as the existing OSGi classloaders. This approach has a
number of attractions, not least becuase it allows webapps to operate
normally, keeps the top level the contianer the same, but removes the
need to recode all webapps so they work inside a Spring DM world and
recode all Components to work with Spring 2.5.5. (including a hibernate
version change).


  Cross Framework Object Communication

Inside OSGi its not entirly simple get references to the OSGi
classloader or to generate a new OSGi classloader and bind it into the
framework. OSGi classloaders look inside themselves and then implement a
search policy that allows the classloader to find classes inside other
bundles. Unfortunately this is a container specific process and there
are no hooks that can be used to grab hold of the OSGi classloader or to
create a new one. 

We can however use a JMX based approach.

</group/sakai-kernel/web/ManagedOSGiClassloader-1.png?hl=en> 

 Here a loader creates a managed object and attaches it to a MBean that
it registers with the ManagementServer. The consumer, which can be
anywhere in the JVM, looks up the MBean in JMX by name. It can then get
the managed object and use it. This pattern works cross classloader with
no references between the classloaders and no static methods. Whatever
Component Manager is used, this method of launching and retrieving will
work in any JVM regardless of the chosen framework.


</group/sakai-kernel/web/ManagedOSGiClassloader-2.png?hl=en> 

Inside Tomcat and all webapp containers, webapps start up within an
isolated webapp container with its own classloader. Each classloader has
a parent classloader that is used for resolving shared classes. There
may be one or more shared classloaders back to the System classloader.
The Webapp classloader has some special rules surrounding system classes. 


</group/sakai-kernel/web/ManagedOSGiClassloader-3.png?hl=en> 

To make a webapp work with OSGi it must bind to the OSGi container. One
approach is to put the whole webapp container inside OSGi, annother is
to enbed OSGi within the container. If embedding inside the container,
and the webapp is going to use components from OSGi it needs to resolve
classes inside the OSGi container. By replacing the parent classloader
of the webapp classloader this will happen with no modifications to the
webapp.


</group/sakai-kernel/web/ManagedOSGiClassloader-4.png?hl=en> 

To do this, and to ensure remain OSGi framework agnostic, we use the JMX
registration process mentioend above. A managed bean is started inside a
bundle inside the OSGi contianer, and so it is loaded by an OSGi
Classloader. The MBean is registered making it available to lookup by
the modified webapp classloader. On startup this looks up the MBean,
gets the OSGiClassloader and sets its parent as the OSGiClassloader. In
addition to doing this it watches the OSGi Bundles lifecycle so that if
it is ever reloaded, the webapp is also reloaded.


 

	Version: 

Page editing not supported in your web browser. Download a new copy of
Firefox <http://getfirefox.com> or Internet Explorer
<http://www.microsoft.com/windows/ie/downloads/> to edit pages.
*3 messages about this page *
*Oct 5 2008* by Ian Boston
Yes,
It varies but we could hack it to make it more stable.
At the moment 2 approaches appear to be taken.
1. Its not unpacked but everything is served from the classpath, so
nothing is editable.
2. Its unpacked to a random space in temp that is deleted when the
container stops.
Now, we could re-write the extender to fix the place where the webapp

*Oct 4 2008* by Jon Gorrono
Ian, regarding this sentence:
'The webapp extender bundle provides a resource resolver to the
classpath of the webapp making the internals of the war availalbe to
the webapp context. This means that you cannot edit the webapp while
loaded, but you have to rebuild the war and redeploy to make changes.'

*Sep 30 2008* by Ian Boston
Based on my experiments on the OSGi POC which focused manly on OSGi
inside tomcat, I have created a page with diagrams that looks at the
issues. The POC included some Spring DM experiments, and considered
the impact of classloader strucutre. I would expect the OSGi as a top
level container POC to add to this document but it starts to expose

Report this page
</groups/abuse?hl=en&group=sakai-kernel&type=page&url=http%3A%2F%2Fgroups.google.com%2Fgroup%2Fsakai-kernel%2Fweb%2Fcomponent-manager-candidates%3Fhl%3Den&_done=%2Fgroup%2Fsakai-kernel%2Fweb%2Fcomponent-manager-candidates%3Fhl%3Den%26&>

Reply to this discussion <#>
Hide message box <#>

	

*Create a group </groups/create?hl=en&lnk=gcf>* - Google Groups
</?hl=en> - Google Home <http://www.google.com/webhp?hl=en> - Terms of
Service
<http://groups.google.com/intl/en/googlegroups/terms_of_service3.html> -
Privacy Policy
<http://groups.google.com/intl/en/googlegroups/privacy3.html>
©2009 Google

